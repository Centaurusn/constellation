package au.gov.asd.tac.constellation.visual.opengl.utilities;

import au.gov.asd.tac.constellation.visual.opengl.utilities.glyphs.FontInfo;
import au.gov.asd.tac.constellation.visual.opengl.utilities.glyphs.GlyphManagerBI;
import java.awt.Color;
import java.awt.GraphicsEnvironment;
import java.io.File;
import java.util.Arrays;
import java.util.List;
import java.util.Locale;
import java.util.prefs.Preferences;
import java.util.stream.Collectors;
import javax.swing.DefaultComboBoxModel;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import org.openide.util.NbPreferences;

final class LabelFontsPanel extends javax.swing.JPanel {

    private final LabelFontsOptionsPanelController controller;

    LabelFontsPanel(LabelFontsOptionsPanelController controller) {
        this.controller = controller;
        initComponents();

        final NumberedTextArea numberedTextArea = new NumberedTextArea(taFontList);
        jScrollPane1.setRowHeaderView(numberedTextArea);

        final String[] scripts = Arrays.stream(Character.UnicodeScript.class.getEnumConstants())
                .map(s -> s.toString())
                .sorted()
                .toArray(String[]::new);
        Arrays.sort(scripts);
        cbScripts.setModel(new DefaultComboBoxModel<>(scripts));

        taFontList.getDocument().addDocumentListener(new DocumentListener(){
            @Override
            public void insertUpdate(final DocumentEvent e) {
                numberedTextArea.updateLineNumbers();
                controller.changed();
            }

            @Override
            public void removeUpdate(final DocumentEvent e) {
                numberedTextArea.updateLineNumbers();
                controller.changed();
            }

            @Override
            public void changedUpdate(final DocumentEvent e) {
                numberedTextArea.updateLineNumbers();
                controller.changed();
            }
        });
    }

    /**
     * Look in the user's local profile's fonts directory for OTF fontfiles.
     * TODO Should we look in %windir% as well?
     *
     * @param existing The existing list of font names.
     *
     * @return The existing list of font names, possibly extended with the names of OTF font files.
     */
    private static String[] otfFontFilesWindows(final String[] existing) {
        final String local = System.getenv("LOCALAPPDATA");
        if(local!=null) {
            final File fontDir = new File(local, "Microsoft/Windows/Fonts");
            if(fontDir.isDirectory()) {
                final File[] files = fontDir.listFiles((dir, name) -> name.toLowerCase().endsWith(".otf"));
                if(files.length>0) {
                    final List<String> names = Arrays.stream(existing).collect(Collectors.toList());
                    for(final File f : files) {
                        names.add(f.getName());
                    }

                    return names.toArray(new String[names.size()]);
                }
            }
        }

        return existing;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        taFontList = new javax.swing.JTextArea();
        cbFonts = new javax.swing.JComboBox<>();
        jLabel1 = new javax.swing.JLabel();
        addFontButton = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTextArea2 = new javax.swing.JTextArea();
        checkButton = new javax.swing.JButton();
        msgLabel = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        cbScripts = new javax.swing.JComboBox<>();
        addScriptButton = new javax.swing.JButton();
        cbMultiFont = new javax.swing.JCheckBox();

        taFontList.setColumns(20);
        taFontList.setRows(5);
        jScrollPane1.setViewportView(taFontList);

        cbFonts.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        org.openide.awt.Mnemonics.setLocalizedText(jLabel1, org.openide.util.NbBundle.getMessage(LabelFontsPanel.class, "LabelFontsPanel.jLabel1.text")); // NOI18N

        org.openide.awt.Mnemonics.setLocalizedText(addFontButton, org.openide.util.NbBundle.getMessage(LabelFontsPanel.class, "LabelFontsPanel.addFontButton.text")); // NOI18N
        addFontButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addFontButtonActionPerformed(evt);
            }
        });

        jTextArea2.setEditable(false);
        jTextArea2.setBackground(java.awt.SystemColor.control);
        jTextArea2.setColumns(20);
        jTextArea2.setFont(new java.awt.Font("Dialog", 0, 13)); // NOI18N
        jTextArea2.setLineWrap(true);
        jTextArea2.setRows(5);
        jTextArea2.setText(org.openide.util.NbBundle.getMessage(LabelFontsPanel.class, "LabelFontsPanel.jTextArea2.text")); // NOI18N
        jTextArea2.setWrapStyleWord(true);
        jTextArea2.setBorder(null);
        jTextArea2.setCaretPosition(0);
        jTextArea2.setFocusable(false);
        jScrollPane2.setViewportView(jTextArea2);

        org.openide.awt.Mnemonics.setLocalizedText(checkButton, org.openide.util.NbBundle.getMessage(LabelFontsPanel.class, "LabelFontsPanel.checkButton.text")); // NOI18N
        checkButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                checkButtonActionPerformed(evt);
            }
        });

        msgLabel.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        org.openide.awt.Mnemonics.setLocalizedText(msgLabel, org.openide.util.NbBundle.getMessage(LabelFontsPanel.class, "LabelFontsPanel.msgLabel.text")); // NOI18N

        org.openide.awt.Mnemonics.setLocalizedText(jLabel2, org.openide.util.NbBundle.getMessage(LabelFontsPanel.class, "LabelFontsPanel.jLabel2.text")); // NOI18N

        cbScripts.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        org.openide.awt.Mnemonics.setLocalizedText(addScriptButton, org.openide.util.NbBundle.getMessage(LabelFontsPanel.class, "LabelFontsPanel.addScriptButton.text")); // NOI18N
        addScriptButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addScriptButtonActionPerformed(evt);
            }
        });

        org.openide.awt.Mnemonics.setLocalizedText(cbMultiFont, org.openide.util.NbBundle.getMessage(LabelFontsPanel.class, "LabelFontsPanel.cbMultiFont.text")); // NOI18N

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(cbMultiFont)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 256, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 456, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(addScriptButton)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                    .addComponent(jLabel2)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                    .addComponent(cbScripts, 0, 220, Short.MAX_VALUE))
                                .addComponent(addFontButton)
                                .addGroup(layout.createSequentialGroup()
                                    .addComponent(jLabel1)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                    .addComponent(cbFonts, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 367, Short.MAX_VALUE)
                                .addComponent(checkButton))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(6, 6, 6)
                                .addComponent(msgLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(cbMultiFont)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane2)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 345, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(cbFonts, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel1)
                    .addComponent(msgLabel))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(addFontButton)
                    .addComponent(checkButton))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(cbScripts, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(addScriptButton)
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents

    private void addFontButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addFontButtonActionPerformed
        // Add the selected font name to the end of the text area.
        //
        final String fontName = (String)cbFonts.getSelectedItem();
        taFontList.insert(fontName + "\n", taFontList.getCaretPosition());
//        String text = taFontList.getText();
//        text = String.format("%s\n%s", text, fontName);
//        if(!text.endsWith("\n")) {
//            text += "\n";
//        }
//
//        taFontList.setText(text);
    }//GEN-LAST:event_addFontButtonActionPerformed

    private void checkButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_checkButtonActionPerformed
        final String text = taFontList.getText();
        final FontInfo.ParsedFontInfo pfi = FontInfo.parseFontInfo(text.split("\n"), GlyphManagerBI.DEFAULT_FONT_SIZE);
        if(pfi.messages.isEmpty()) {
            msgLabel.setText("OK");
            msgLabel.setForeground(Color.BLACK);
        } else {
            msgLabel.setText(pfi.messages.get(0));
            msgLabel.setForeground(Color.RED.darker());
        }
    }//GEN-LAST:event_checkButtonActionPerformed

    private void addScriptButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addScriptButtonActionPerformed
        final String scriptName = (String)cbScripts.getSelectedItem();
        taFontList.insert("," + scriptName, taFontList.getCaretPosition());
    }//GEN-LAST:event_addScriptButtonActionPerformed

    void load() {
        cbMultiFont.setSelected(LabelFontsPreferenceKeys.useMultiFontLabels());
        taFontList.setText(LabelFontsPreferenceKeys.getFontText());
        taFontList.setCaretPosition(0);
        msgLabel.setText("");

        // Put the font loading here (rather than the constructor) so the user
        // can install a new font and see it without restarting.
        // TODO Look for UNIX fonts.
        //
        final GraphicsEnvironment ge = GraphicsEnvironment.getLocalGraphicsEnvironment();
        String[] availableFonts = ge.getAvailableFontFamilyNames(Locale.getDefault());
        final String os = System.getProperty("os.name");
        if(os.toLowerCase().contains("win")) {
            availableFonts = otfFontFilesWindows(availableFonts);
        }

        Arrays.sort(availableFonts);
        cbFonts.setModel(new DefaultComboBoxModel<>(availableFonts));

        // TODO read settings and initialize GUI
        // Example:
        // someCheckBox.setSelected(Preferences.userNodeForPackage(LabelFontsPanel.class).getBoolean("someFlag", false));
        // or for org.openide.util with API spec. version >= 7.4:
        // someCheckBox.setSelected(NbPreferences.forModule(LabelFontsPanel.class).getBoolean("someFlag", false));
        // or:
        // someTextField.setText(SomeSystemOption.getDefault().getSomeStringProperty());
    }

    void store() {
        final Preferences prefs = NbPreferences.forModule(LabelFontsPreferenceKeys.class);
        prefs.putBoolean(LabelFontsPreferenceKeys.USE_MULTI_FONTS, cbMultiFont.isSelected());
        prefs.put(LabelFontsPreferenceKeys.FONT_LIST, taFontList.getText());
        // TODO store modified settings
        // Example:
        // Preferences.userNodeForPackage(LabelFontsPanel.class).putBoolean("someFlag", someCheckBox.isSelected());
        // or for org.openide.util with API spec. version >= 7.4:
        // NbPreferences.forModule(LabelFontsPanel.class).putBoolean("someFlag", someCheckBox.isSelected());
        // or:
        // SomeSystemOption.getDefault().setSomeStringProperty(someTextField.getText());
    }

    boolean valid() {
        // TODO check whether form is consistent and complete
        return true;
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton addFontButton;
    private javax.swing.JButton addScriptButton;
    private javax.swing.JComboBox<String> cbFonts;
    private javax.swing.JCheckBox cbMultiFont;
    private javax.swing.JComboBox<String> cbScripts;
    private javax.swing.JButton checkButton;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTextArea jTextArea2;
    private javax.swing.JLabel msgLabel;
    private javax.swing.JTextArea taFontList;
    // End of variables declaration//GEN-END:variables
}
